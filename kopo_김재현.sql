-- STEP2. 평균값 계산을 위해 테이블 중간저장
CREATE TABLE MIDTERM_FIRST AS(
SELECT
    SEG1,
    SEG2,
    SEG3,
    TARGETWEEK,
    YEAR,
    WEEK,
    QTY,
    FCST_W6,
    FCST_W5,
    FCST_W4,
    FCST_W3,
    FCST_W2,
    FCST_W1,
    -- STEP1. 각 항에 맞는 인수값 채우기
    -- ABS8W
    NVL(ABS(DECODE(FCST_W6,NULL,0,FCST_W6)-QTY),0) AS ABS8W_W6,
    NVL(ABS(DECODE(FCST_W5,NULL,0,FCST_W5)-QTY),0) AS ABS8W_W5,
    NVL(ABS(DECODE(FCST_W4,NULL,0,FCST_W4)-QTY),0) AS ABS8W_W4,
    NVL(ABS(DECODE(FCST_W3,NULL,0,FCST_W3)-QTY),0) AS ABS8W_W3,
    NVL(ABS(DECODE(FCST_W2,NULL,0,FCST_W2)-QTY),0) AS ABS8W_W2,
    NVL(ABS(DECODE(FCST_W1,NULL,0,FCST_W1)-QTY),0) AS ABS8W_W1,
    -- ACC8W
    CASE WHEN (NVL(1-ABS(DECODE(FCST_W6,NULL,0,FCST_W6)-QTY)/DECODE(FCST_W6,0,NULL,FCST_W6),0)) <= 0 THEN 0 ELSE (NVL(1-ABS(DECODE(FCST_W6,NULL,0,FCST_W6)-QTY)/DECODE(FCST_W6,0,NULL,FCST_W6),0)) END AS ACC8W_W6,
    CASE WHEN (NVL(1-ABS(DECODE(FCST_W5,NULL,0,FCST_W5)-QTY)/DECODE(FCST_W5,0,NULL,FCST_W5),0)) <= 0 THEN 0 ELSE (NVL(1-ABS(DECODE(FCST_W5,NULL,0,FCST_W5)-QTY)/DECODE(FCST_W5,0,NULL,FCST_W5),0)) END AS ACC8W_W5,
    CASE WHEN (NVL(1-ABS(DECODE(FCST_W4,NULL,0,FCST_W4)-QTY)/DECODE(FCST_W4,0,NULL,FCST_W4),0)) <= 0 THEN 0 ELSE (NVL(1-ABS(DECODE(FCST_W4,NULL,0,FCST_W4)-QTY)/DECODE(FCST_W4,0,NULL,FCST_W4),0)) END AS ACC8W_W4,
    CASE WHEN (NVL(1-ABS(DECODE(FCST_W3,NULL,0,FCST_W3)-QTY)/DECODE(FCST_W3,0,NULL,FCST_W3),0)) <= 0 THEN 0 ELSE (NVL(1-ABS(DECODE(FCST_W3,NULL,0,FCST_W3)-QTY)/DECODE(FCST_W3,0,NULL,FCST_W3),0)) END AS ACC8W_W3,
    CASE WHEN (NVL(1-ABS(DECODE(FCST_W2,NULL,0,FCST_W2)-QTY)/DECODE(FCST_W2,0,NULL,FCST_W2),0)) <= 0 THEN 0 ELSE (NVL(1-ABS(DECODE(FCST_W2,NULL,0,FCST_W2)-QTY)/DECODE(FCST_W2,0,NULL,FCST_W2),0)) END AS ACC8W_W2,
    CASE WHEN (NVL(1-ABS(DECODE(FCST_W1,NULL,0,FCST_W1)-QTY)/DECODE(FCST_W1,0,NULL,FCST_W1),0)) <= 0 THEN 0 ELSE (NVL(1-ABS(DECODE(FCST_W1,NULL,0,FCST_W1)-QTY)/DECODE(FCST_W1,0,NULL,FCST_W1),0)) END AS ACC8W_W1,
    -- ACC8W_QTY_W
    CASE WHEN (NVL(FCST_W6 * (1-ABS(FCST_W6-QTY)/DECODE(FCST_W6,0,NULL,FCST_W6)),0)) <= 0 THEN 0 ELSE (FCST_W6 * (NVL(1-ABS(FCST_W6-QTY)/DECODE(FCST_W6,0,NULL,FCST_W6),0))) END AS ACC8W_QTY_W6,
    CASE WHEN (NVL(FCST_W5 * (1-ABS(FCST_W5-QTY)/DECODE(FCST_W5,0,NULL,FCST_W5)),0)) <= 0 THEN 0 ELSE (FCST_W5 * (NVL(1-ABS(FCST_W5-QTY)/DECODE(FCST_W5,0,NULL,FCST_W5),0))) END AS ACC8W_QTY_W5,
    CASE WHEN (NVL(FCST_W4 * (1-ABS(FCST_W4-QTY)/DECODE(FCST_W4,0,NULL,FCST_W4)),0)) <= 0 THEN 0 ELSE (FCST_W4 * (NVL(1-ABS(FCST_W4-QTY)/DECODE(FCST_W4,0,NULL,FCST_W4),0))) END AS ACC8W_QTY_W4,
    CASE WHEN (NVL(FCST_W3 * (1-ABS(FCST_W3-QTY)/DECODE(FCST_W3,0,NULL,FCST_W3)),0)) <= 0 THEN 0 ELSE (FCST_W3 * (NVL(1-ABS(FCST_W3-QTY)/DECODE(FCST_W3,0,NULL,FCST_W3),0))) END AS ACC8W_QTY_W3,
    CASE WHEN (NVL(FCST_W2 * (1-ABS(FCST_W2-QTY)/DECODE(FCST_W2,0,NULL,FCST_W2)),0)) <= 0 THEN 0 ELSE (FCST_W2 * (NVL(1-ABS(FCST_W2-QTY)/DECODE(FCST_W2,0,NULL,FCST_W2),0))) END AS ACC8W_QTY_W2,
    CASE WHEN (NVL(FCST_W1 * (1-ABS(FCST_W1-QTY)/DECODE(FCST_W1,0,NULL,FCST_W1)),0)) <= 0 THEN 0 ELSE (FCST_W1 * (NVL(1-ABS(FCST_W1-QTY)/DECODE(FCST_W1,0,NULL,FCST_W1),0))) END AS ACC8W_QTY_W1
FROM MIDTERM
);

-- FCST_AVG
SELECT ACC8W_QTY_W1,
       ((COALESCE(FCST_W6, 0) + COALESCE(FCST_W5, 0) + COALESCE(FCST_W4, 0) + COALESCE(FCST_W3, 0) + COALESCE(FCST_W2, 0) + COALESCE(FCST_W1, 0)) /
        NULLIF(NVL2(FCST_W6, 1, 0) + NVL2(FCST_W5, 1, 0)  + NVL2(FCST_W4, 1, 0) + NVL2(FCST_W3, 1, 0)  + NVL2(FCST_W2, 1, 0)  + NVL2(FCST_W1, 1, 0), 0)
       ) AS FCST_AVG
FROM MIDTERM_FIRST;

-- ACC_AVG
SELECT ACC8W_W1,
       ((COALESCE(ACC8W_QTY_W6, 0) + COALESCE(ACC8W_QTY_W5, 0) + COALESCE(ACC8W_QTY_W4, 0) + COALESCE(ACC8W_QTY_W3, 0) + COALESCE(ACC8W_QTY_W2, 0) + COALESCE(ACC8W_QTY_W1, 0)) /
        NULLIF(NVL2(ACC8W_QTY_W6, 1, 0) + NVL2(ACC8W_QTY_W5, 1, 0)  + NVL2(ACC8W_QTY_W4, 1, 0) + NVL2(ACC8W_QTY_W3, 1, 0)  + NVL2(ACC8W_QTY_W2, 1, 0)  + NVL2(ACC8W_QTY_W1, 1, 0), 0)
       ) AS ACC_AVG
FROM MIDTERM_FIRST;

-- STEP3. 평균값 계산식을 포함한 테이블 최종 저장
CREATE TABLE MIDTERM_4TH_KJH AS(
SELECT
    SEG1, SEG2, SEG3,
    TARGETWEEK, YEAR, WEEK,
    QTY,
    FCST_W6, FCST_W5, FCST_W4, FCST_W3, FCST_W2, FCST_W1,
    ABS8W_W6, ABS8W_W5, ABS8W_W4, ABS8W_W3, ABS8W_W2, ABS8W_W1,
    ACC8W_W6, ACC8W_W5, ACC8W_W4, ACC8W_W3, ACC8W_W2, ACC8W_W1,
    ACC8W_QTY_W6, ACC8W_QTY_W5, ACC8W_QTY_W4, ACC8W_QTY_W3, ACC8W_QTY_W2, ACC8W_QTY_W1,
       ((COALESCE(FCST_W6, 0) + COALESCE(FCST_W5, 0) + COALESCE(FCST_W4, 0) + COALESCE(FCST_W3, 0) + COALESCE(FCST_W2, 0) + COALESCE(FCST_W1, 0)) /
        NULLIF(NVL2(FCST_W6, 1, 0) + NVL2(FCST_W5, 1, 0)  + NVL2(FCST_W4, 1, 0) + NVL2(FCST_W3, 1, 0)  + NVL2(FCST_W2, 1, 0)  + NVL2(FCST_W1, 1, 0), 0)
       ) AS FCST_AVG,
       ((COALESCE(ACC8W_QTY_W6, 0) + COALESCE(ACC8W_QTY_W5, 0) + COALESCE(ACC8W_QTY_W4, 0) + COALESCE(ACC8W_QTY_W3, 0) + COALESCE(ACC8W_QTY_W2, 0) + COALESCE(ACC8W_QTY_W1, 0)) /
        NULLIF(NVL2(ACC8W_QTY_W6, 1, 0) + NVL2(ACC8W_QTY_W5, 1, 0)  + NVL2(ACC8W_QTY_W4, 1, 0) + NVL2(ACC8W_QTY_W3, 1, 0)  + NVL2(ACC8W_QTY_W2, 1, 0)  + NVL2(ACC8W_QTY_W1, 1, 0), 0)
       ) AS ACC_AVG
FROM MIDTERM_FIRST);  

SELECT * FROM MIDTERM_4TH_KJH;